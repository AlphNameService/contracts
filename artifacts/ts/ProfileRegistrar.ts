/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as ProfileRegistrarContractJson } from "../profiles/ProfileRegistrar.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Profile, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace ProfileRegistrarTypes {
  export type Fields = {
    registrarOwner: Address;
    primaryRegistrar: HexString;
  };

  export type State = ContractState<Fields>;

  export type ProfileSetEvent = ContractEvent<{
    owner: Address;
    name: HexString;
    imgUri: HexString;
  }>;
  export type ProfileRemovedEvent = ContractEvent<{
    owner: Address;
    name: HexString;
    imgUri: HexString;
  }>;

  export interface CallMethodTable {
    profileExists: {
      params: CallContractParams<{ profileOwner: Address }>;
      result: CallContractResult<boolean>;
    };
    setProfile: {
      params: CallContractParams<{
        profileOwner: Address;
        name: HexString;
        imgUri: HexString;
      }>;
      result: CallContractResult<null>;
    };
    removeProfile: {
      params: CallContractParams<{ profileOwner: Address }>;
      result: CallContractResult<null>;
    };
    getProfile: {
      params: CallContractParams<{ profileOwner: Address }>;
      result: CallContractResult<Profile>;
    };
    migrate: {
      params: CallContractParams<{ newCode: HexString }>;
      result: CallContractResult<null>;
    };
    migrateWithFields: {
      params: CallContractParams<{
        newCode: HexString;
        immFieldsEncoded: HexString;
        mutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    updateRegistrarOwner: {
      params: CallContractParams<{ newOwner: Address }>;
      result: CallContractResult<null>;
    };
    updatePrimaryRegistrar: {
      params: CallContractParams<{ newRegistrar: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    profileExists: {
      params: SignExecuteContractMethodParams<{ profileOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setProfile: {
      params: SignExecuteContractMethodParams<{
        profileOwner: Address;
        name: HexString;
        imgUri: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    removeProfile: {
      params: SignExecuteContractMethodParams<{ profileOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getProfile: {
      params: SignExecuteContractMethodParams<{ profileOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    migrate: {
      params: SignExecuteContractMethodParams<{ newCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFields: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        immFieldsEncoded: HexString;
        mutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateRegistrarOwner: {
      params: SignExecuteContractMethodParams<{ newOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    updatePrimaryRegistrar: {
      params: SignExecuteContractMethodParams<{ newRegistrar: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  ProfileRegistrarInstance,
  ProfileRegistrarTypes.Fields
> {
  encodeFields(fields: ProfileRegistrarTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as ProfileRegistrarTypes.Fields;
  }

  eventIndex = { ProfileSet: 0, ProfileRemoved: 1 };
  consts = {
    ErrorCodes: {
      InvalidNameHolder: BigInt("0"),
      InvalidProfileOwner: BigInt("1"),
      InvalidCaller: BigInt("2"),
    },
  };

  at(address: string): ProfileRegistrarInstance {
    return new ProfileRegistrarInstance(address);
  }

  tests = {
    profileExists: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        { profileOwner: Address },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<boolean, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(this, "profileExists", params, getContractByCodeHash);
    },
    setProfile: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        { profileOwner: Address; name: HexString; imgUri: HexString },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<null, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(this, "setProfile", params, getContractByCodeHash);
    },
    removeProfile: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        { profileOwner: Address },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<null, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(this, "removeProfile", params, getContractByCodeHash);
    },
    getProfile: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        { profileOwner: Address },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<Profile, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(this, "getProfile", params, getContractByCodeHash);
    },
    migrate: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        { newCode: HexString },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<null, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(this, "migrate", params, getContractByCodeHash);
    },
    migrateWithFields: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        {
          newCode: HexString;
          immFieldsEncoded: HexString;
          mutFieldsEncoded: HexString;
        },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<null, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    updateRegistrarOwner: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        { newOwner: Address },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<null, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(
        this,
        "updateRegistrarOwner",
        params,
        getContractByCodeHash
      );
    },
    updatePrimaryRegistrar: async (
      params: TestContractParams<
        ProfileRegistrarTypes.Fields,
        { newRegistrar: HexString },
        { profiles?: Map<Address, Profile> }
      >
    ): Promise<
      TestContractResult<null, { profiles?: Map<Address, Profile> }>
    > => {
      return testMethod(
        this,
        "updatePrimaryRegistrar",
        params,
        getContractByCodeHash
      );
    },
  };
}

// Use this object to test and deploy the contract
export const ProfileRegistrar = new Factory(
  Contract.fromJson(
    ProfileRegistrarContractJson,
    "=8-3+f=1-2=2-2+92=2-2+bf=2-2+d3=2-1=1+b=1+20042=1-2+5=73-1+2=285-1+d=40+7a7e0214696e73657274206174206d617020706174683a2000=45-1+3=236+7a7e021472656d6f7665206174206d617020706174683a2000=284",
    "4656f1f88cb139505c2d9af8d88894119d1f00813b16cc04bc92c46bd522d79a",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class ProfileRegistrarInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    profiles: new RalphMap<Address, Profile>(
      ProfileRegistrar.contract,
      this.contractId,
      "profiles"
    ),
  };

  async fetchState(): Promise<ProfileRegistrarTypes.State> {
    return fetchContractState(ProfileRegistrar, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeProfileSetEvent(
    options: EventSubscribeOptions<ProfileRegistrarTypes.ProfileSetEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      ProfileRegistrar.contract,
      this,
      options,
      "ProfileSet",
      fromCount
    );
  }

  subscribeProfileRemovedEvent(
    options: EventSubscribeOptions<ProfileRegistrarTypes.ProfileRemovedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      ProfileRegistrar.contract,
      this,
      options,
      "ProfileRemoved",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | ProfileRegistrarTypes.ProfileSetEvent
      | ProfileRegistrarTypes.ProfileRemovedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      ProfileRegistrar.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    profileExists: async (
      params: ProfileRegistrarTypes.CallMethodParams<"profileExists">
    ): Promise<ProfileRegistrarTypes.CallMethodResult<"profileExists">> => {
      return callMethod(
        ProfileRegistrar,
        this,
        "profileExists",
        params,
        getContractByCodeHash
      );
    },
    setProfile: async (
      params: ProfileRegistrarTypes.CallMethodParams<"setProfile">
    ): Promise<ProfileRegistrarTypes.CallMethodResult<"setProfile">> => {
      return callMethod(
        ProfileRegistrar,
        this,
        "setProfile",
        params,
        getContractByCodeHash
      );
    },
    removeProfile: async (
      params: ProfileRegistrarTypes.CallMethodParams<"removeProfile">
    ): Promise<ProfileRegistrarTypes.CallMethodResult<"removeProfile">> => {
      return callMethod(
        ProfileRegistrar,
        this,
        "removeProfile",
        params,
        getContractByCodeHash
      );
    },
    getProfile: async (
      params: ProfileRegistrarTypes.CallMethodParams<"getProfile">
    ): Promise<ProfileRegistrarTypes.CallMethodResult<"getProfile">> => {
      return callMethod(
        ProfileRegistrar,
        this,
        "getProfile",
        params,
        getContractByCodeHash
      );
    },
    migrate: async (
      params: ProfileRegistrarTypes.CallMethodParams<"migrate">
    ): Promise<ProfileRegistrarTypes.CallMethodResult<"migrate">> => {
      return callMethod(
        ProfileRegistrar,
        this,
        "migrate",
        params,
        getContractByCodeHash
      );
    },
    migrateWithFields: async (
      params: ProfileRegistrarTypes.CallMethodParams<"migrateWithFields">
    ): Promise<ProfileRegistrarTypes.CallMethodResult<"migrateWithFields">> => {
      return callMethod(
        ProfileRegistrar,
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    updateRegistrarOwner: async (
      params: ProfileRegistrarTypes.CallMethodParams<"updateRegistrarOwner">
    ): Promise<
      ProfileRegistrarTypes.CallMethodResult<"updateRegistrarOwner">
    > => {
      return callMethod(
        ProfileRegistrar,
        this,
        "updateRegistrarOwner",
        params,
        getContractByCodeHash
      );
    },
    updatePrimaryRegistrar: async (
      params: ProfileRegistrarTypes.CallMethodParams<"updatePrimaryRegistrar">
    ): Promise<
      ProfileRegistrarTypes.CallMethodResult<"updatePrimaryRegistrar">
    > => {
      return callMethod(
        ProfileRegistrar,
        this,
        "updatePrimaryRegistrar",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    profileExists: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"profileExists">
    ): Promise<
      ProfileRegistrarTypes.SignExecuteMethodResult<"profileExists">
    > => {
      return signExecuteMethod(ProfileRegistrar, this, "profileExists", params);
    },
    setProfile: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"setProfile">
    ): Promise<ProfileRegistrarTypes.SignExecuteMethodResult<"setProfile">> => {
      return signExecuteMethod(ProfileRegistrar, this, "setProfile", params);
    },
    removeProfile: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"removeProfile">
    ): Promise<
      ProfileRegistrarTypes.SignExecuteMethodResult<"removeProfile">
    > => {
      return signExecuteMethod(ProfileRegistrar, this, "removeProfile", params);
    },
    getProfile: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"getProfile">
    ): Promise<ProfileRegistrarTypes.SignExecuteMethodResult<"getProfile">> => {
      return signExecuteMethod(ProfileRegistrar, this, "getProfile", params);
    },
    migrate: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"migrate">
    ): Promise<ProfileRegistrarTypes.SignExecuteMethodResult<"migrate">> => {
      return signExecuteMethod(ProfileRegistrar, this, "migrate", params);
    },
    migrateWithFields: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"migrateWithFields">
    ): Promise<
      ProfileRegistrarTypes.SignExecuteMethodResult<"migrateWithFields">
    > => {
      return signExecuteMethod(
        ProfileRegistrar,
        this,
        "migrateWithFields",
        params
      );
    },
    updateRegistrarOwner: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"updateRegistrarOwner">
    ): Promise<
      ProfileRegistrarTypes.SignExecuteMethodResult<"updateRegistrarOwner">
    > => {
      return signExecuteMethod(
        ProfileRegistrar,
        this,
        "updateRegistrarOwner",
        params
      );
    },
    updatePrimaryRegistrar: async (
      params: ProfileRegistrarTypes.SignExecuteMethodParams<"updatePrimaryRegistrar">
    ): Promise<
      ProfileRegistrarTypes.SignExecuteMethodResult<"updatePrimaryRegistrar">
    > => {
      return signExecuteMethod(
        ProfileRegistrar,
        this,
        "updatePrimaryRegistrar",
        params
      );
    },
  };

  async multicall<Calls extends ProfileRegistrarTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ProfileRegistrarTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      ProfileRegistrar,
      this,
      calls,
      getContractByCodeHash
    )) as ProfileRegistrarTypes.MultiCallResults<Calls>;
  }
}
