/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as RecordContractJson } from "../registrars/Record.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Profile, AllStructs } from "./types";

// Custom types for the contract
export namespace RecordTypes {
  export type Fields = {
    registrar: HexString;
    owner: Address;
    ttl: bigint;
    manager: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    setOwner: {
      params: CallContractParams<{ newOwner: Address; newManager: Address }>;
      result: CallContractResult<null>;
    };
    getManager: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getTTL: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    setTTL: {
      params: CallContractParams<{ newTTL: bigint }>;
      result: CallContractResult<null>;
    };
    destroy: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setOwner: {
      params: SignExecuteContractMethodParams<{
        newOwner: Address;
        newManager: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getManager: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTTL: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setTTL: {
      params: SignExecuteContractMethodParams<{ newTTL: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    destroy: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<RecordInstance, RecordTypes.Fields> {
  encodeFields(fields: RecordTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as RecordTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      InvalidCaller: BigInt("0"),
      InvalidArgs: BigInt("1"),
      ExpectAssetAddress: BigInt("2"),
      NameHasBeenRegistered: BigInt("3"),
      ContractNotExists: BigInt("4"),
      NameHasExpired: BigInt("5"),
      InvalidCredentialToken: BigInt("6"),
    },
  };

  at(address: string): RecordInstance {
    return new RecordInstance(address);
  }

  tests = {
    getOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<RecordTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOwner", params, getContractByCodeHash);
    },
    setOwner: async (
      params: TestContractParamsWithoutMaps<
        RecordTypes.Fields,
        { newOwner: Address; newManager: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setOwner", params, getContractByCodeHash);
    },
    getManager: async (
      params: Omit<
        TestContractParamsWithoutMaps<RecordTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getManager", params, getContractByCodeHash);
    },
    getTTL: async (
      params: Omit<
        TestContractParamsWithoutMaps<RecordTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTTL", params, getContractByCodeHash);
    },
    setTTL: async (
      params: TestContractParamsWithoutMaps<
        RecordTypes.Fields,
        { newTTL: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setTTL", params, getContractByCodeHash);
    },
    destroy: async (
      params: Omit<
        TestContractParamsWithoutMaps<RecordTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Record = new Factory(
  Contract.fromJson(
    RecordContractJson,
    "",
    "4dc3a8b556c3ca07d25bb5952faf3cd1cd075eb2b38165d86da9ced47ffed69f",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class RecordInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<RecordTypes.State> {
    return fetchContractState(Record, this);
  }

  view = {
    getOwner: async (
      params?: RecordTypes.CallMethodParams<"getOwner">
    ): Promise<RecordTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        Record,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setOwner: async (
      params: RecordTypes.CallMethodParams<"setOwner">
    ): Promise<RecordTypes.CallMethodResult<"setOwner">> => {
      return callMethod(
        Record,
        this,
        "setOwner",
        params,
        getContractByCodeHash
      );
    },
    getManager: async (
      params?: RecordTypes.CallMethodParams<"getManager">
    ): Promise<RecordTypes.CallMethodResult<"getManager">> => {
      return callMethod(
        Record,
        this,
        "getManager",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTTL: async (
      params?: RecordTypes.CallMethodParams<"getTTL">
    ): Promise<RecordTypes.CallMethodResult<"getTTL">> => {
      return callMethod(
        Record,
        this,
        "getTTL",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setTTL: async (
      params: RecordTypes.CallMethodParams<"setTTL">
    ): Promise<RecordTypes.CallMethodResult<"setTTL">> => {
      return callMethod(Record, this, "setTTL", params, getContractByCodeHash);
    },
    destroy: async (
      params?: RecordTypes.CallMethodParams<"destroy">
    ): Promise<RecordTypes.CallMethodResult<"destroy">> => {
      return callMethod(
        Record,
        this,
        "destroy",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getOwner: async (
      params: RecordTypes.SignExecuteMethodParams<"getOwner">
    ): Promise<RecordTypes.SignExecuteMethodResult<"getOwner">> => {
      return signExecuteMethod(Record, this, "getOwner", params);
    },
    setOwner: async (
      params: RecordTypes.SignExecuteMethodParams<"setOwner">
    ): Promise<RecordTypes.SignExecuteMethodResult<"setOwner">> => {
      return signExecuteMethod(Record, this, "setOwner", params);
    },
    getManager: async (
      params: RecordTypes.SignExecuteMethodParams<"getManager">
    ): Promise<RecordTypes.SignExecuteMethodResult<"getManager">> => {
      return signExecuteMethod(Record, this, "getManager", params);
    },
    getTTL: async (
      params: RecordTypes.SignExecuteMethodParams<"getTTL">
    ): Promise<RecordTypes.SignExecuteMethodResult<"getTTL">> => {
      return signExecuteMethod(Record, this, "getTTL", params);
    },
    setTTL: async (
      params: RecordTypes.SignExecuteMethodParams<"setTTL">
    ): Promise<RecordTypes.SignExecuteMethodResult<"setTTL">> => {
      return signExecuteMethod(Record, this, "setTTL", params);
    },
    destroy: async (
      params: RecordTypes.SignExecuteMethodParams<"destroy">
    ): Promise<RecordTypes.SignExecuteMethodResult<"destroy">> => {
      return signExecuteMethod(Record, this, "destroy", params);
    },
  };

  async multicall<Calls extends RecordTypes.MultiCallParams>(
    calls: Calls
  ): Promise<RecordTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Record,
      this,
      calls,
      getContractByCodeHash
    )) as RecordTypes.MultiCallResults<Calls>;
  }
}
